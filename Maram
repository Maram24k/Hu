import 'package:flutter/material.dart';
import 'task.dart';





void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(primaryColor: Colors.blue),
      home: TaskEntryScreen(),
    );
  }
}

class TaskEntryScreen extends StatefulWidget {
  const TaskEntryScreen({super.key});

  @override
  _TaskEntryScreenState createState() => _TaskEntryScreenState();
}

class _TaskEntryScreenState extends State<TaskEntryScreen> {
  final TextEditingController _taskNameController = TextEditingController();
  final TextEditingController _taskDescriptionController = TextEditingController();
  final List<Map<String, String>> tasks = [];

  String _selectedHour = "12";
  String _selectedMinute = "00";
  String _selectedPeriod = "AM";

  final List<String> _hours = List.generate(12, (index) => (index + 1).toString()).toSet().toList();
  final List<String> _minutes = List.generate(60, (index) => index.toString().padLeft(2, '0')).toSet().toList();
  final List<String> _periods = ["AM", "PM"];

  // ✅ إصلاح اختيار الوقت وضمان صحة القيم
  void _showTimePicker() {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setModalState) {
            return Container(
              padding: const EdgeInsets.all(16),
              height: 250,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Text("اختر الوقت", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      // 🔹 اختيار الساعة مع التأكد من صحة القيم
                      Expanded(
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton<String>(
                            value: _hours.contains(_selectedHour) ? _selectedHour : _hours.first,
                            isExpanded: true,
                            onChanged: (String? newValue) {
                              setModalState(() {
                                _selectedHour = newValue!;
                              });
                            },
                            items: _hours.map((String value) {
                              return DropdownMenuItem(value: value, child: Center(child: Text(value)));
                            }).toList(),
                          ),
                        ),
                      ),
                      const Text(":", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),

                      // 🔹 اختيار الدقائق مع التأكد من صحة القيم
                      Expanded(
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton<String>(
                            value: _minutes.contains(_selectedMinute) ? _selectedMinute : _minutes.first,
                            isExpanded: true,
                            onChanged: (String? newValue) {
                              setModalState(() {
                                _selectedMinute = newValue!;
                              });
                            },
                            items: _minutes.map((String value) {
                              return DropdownMenuItem(value: value, child: Center(child: Text(value)));
                            }).toList(),
                          ),
                        ),
                      ),

                      // 🔹 اختيار AM/PM
                      Expanded(
                        child: DropdownButtonHideUnderline(
                          child: DropdownButton<String>(
                            value: _selectedPeriod,
                            isExpanded: true,
                            onChanged: (String? newValue) {
                              setModalState(() {
                                _selectedPeriod = newValue!;
                              });
                            },
                            items: _periods.map((String value) {
                              return DropdownMenuItem(value: value, child: Center(child: Text(value)));
                            }).toList(),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {}); // ✅ تحديث القيم بعد اختيار الوقت
                      Navigator.pop(context);
                    },
                    child: const Text("تأكيد"),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  void _addTask() {
    if (_taskNameController.text.isNotEmpty && _taskDescriptionController.text.isNotEmpty) {
      setState(() {
        tasks.add({
          "name": _taskNameController.text,
          "description": _taskDescriptionController.text,
          "time": "$_selectedHour:$_selectedMinute $_selectedPeriod"
        });
      });

      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text("تمت الإضافة"),
            content: Text("تمت إضافة المهمة بنجاح!"),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop(); // ✅ إغلاق مربع الحوار
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => TaskScreen(tasks: List.from(tasks)), // ✅ تمرير قائمة صحيحة
                    ),
                  );
                  _taskNameController.clear();
                  _taskDescriptionController.clear();
                },
                child: Text("موافق"),
              ),
            ],
          );
        },
      );
    }
  }








  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          Positioned.fill(child: Image.asset("assets/background.jpg", fit: BoxFit.cover)),
          Positioned(top: 16, left: 16, child: Image.asset("assets/logo.png", width: 120, height: 120)),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                const SizedBox(height: 80),
                const Text("ادرج مهامك اليومية", style: TextStyle(fontSize: 26, color: Colors.white, fontWeight: FontWeight.bold), textAlign: TextAlign.right),
                const SizedBox(height: 16),

                TextField(
                  controller: _taskNameController,
                  textAlign: TextAlign.right,
                  decoration: InputDecoration(
                    filled: true,
                    fillColor: Colors.white,
                    border: OutlineInputBorder(),
                    labelText: "اسم المهمة",
                  ),
                ),
                const SizedBox(height: 8),

                TextField(
                  controller: _taskDescriptionController,
                  textAlign: TextAlign.right,
                  maxLines: 2,
                  decoration: InputDecoration(
                    filled: true,
                    fillColor: Colors.white,
                    border: OutlineInputBorder(),
                    labelText: "وصف المهمة",
                  ),
                ),
                const SizedBox(height: 8),

                GestureDetector(
                  onTap: _showTimePicker,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 14),
                    decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(8), border: Border.all(color: Colors.grey)),
                    child: Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [Text("$_selectedHour:$_selectedMinute $_selectedPeriod"), const Icon(Icons.arrow_drop_down)]),
                
